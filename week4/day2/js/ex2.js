// Упражнение 1 Выведите на странице часы

// Упражнение 2 Выведите на странице данные о количестве секунд, оставшихся до конца дня. Данные должны обновляться динамически

// Упражнение 3 Выведите на странице инпут и кнопку. В инпут вводится число. По нажатию на кнопку запускается таймер с количеством секунд, равным числу, введенному пользователем

// Упражнение 4 Реализуйте функцию, которая возвращает случайное число в диапазоне от первого переданного в неё параметра до второго

// Упражнение 5 Создайте промис, который успешно выполнится через 3 секунды

// Упражнение 6 Создайте промис, который завершится с ошибкой через 3 секунды

// Упражнение 7 Реализуйте функцию, возвращающую промис, в котором генерируется случайное число. Если это число оказывается больше 10 то промис должен завершиться с ошибкой.

// Упражнение 8 Используя методы catch и then обработайте результаты вызова функции из упражнения 7

// Упражнение 9 Реализуйте две функции, которые посредством промисов можно вызывать по цепочке: первая на вход принимает массив чисел, и возвращает массив всех чётных чисел; вторая принимает на вход массив чисел и возвращает их сумму. Обработайте результаты вызовов посредством метода catch

// Упражнение 10 Используя синтаксис async/await измените вид того, как вызываются функции из упражнения 9

// Упражнение 11 Создайте промис, который завершится с ошибкой. Обработайте эту ошибку в блоке catch

// Упражнение 12 Реализуйте функцию, возвращающую массив промисов, каждый из которых завершается на 1 секунду позже остальных и резолвится со значением его задержки в секундах. Получите результаты a)Первого выполненного промиса (Promise.race) b)Всех промисов, которые выполнятся (Promise.all)